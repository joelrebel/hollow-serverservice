// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testServerConditionStatusTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(serverConditionStatusTypeAllColumns) == len(serverConditionStatusTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerConditionStatusType{}
	if err = randomize.Struct(seed, &o, serverConditionStatusTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerConditionStatusType: %s", err)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverConditionStatusTypeDBTypes, false, serverConditionStatusTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerConditionStatusType: %s", err)
	}

	count, err = ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerConditionStatusTypes(t *testing.T) {
	t.Parallel()

	query := ServerConditionStatusTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerConditionStatusTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerConditionStatusTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerConditionStatusTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerConditionStatusTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerConditionStatusTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerConditionStatusTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerConditionStatusTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerConditionStatusType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerConditionStatusTypeExists to return true, but got false.")
	}
}

func testServerConditionStatusTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverConditionStatusTypeFound, err := FindServerConditionStatusType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverConditionStatusTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerConditionStatusTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerConditionStatusTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerConditionStatusTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerConditionStatusTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerConditionStatusTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverConditionStatusTypeOne := &ServerConditionStatusType{}
	serverConditionStatusTypeTwo := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, serverConditionStatusTypeOne, serverConditionStatusTypeDBTypes, false, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}
	if err = randomize.Struct(seed, serverConditionStatusTypeTwo, serverConditionStatusTypeDBTypes, false, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverConditionStatusTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverConditionStatusTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerConditionStatusTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerConditionStatusTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverConditionStatusTypeOne := &ServerConditionStatusType{}
	serverConditionStatusTypeTwo := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, serverConditionStatusTypeOne, serverConditionStatusTypeDBTypes, false, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}
	if err = randomize.Struct(seed, serverConditionStatusTypeTwo, serverConditionStatusTypeDBTypes, false, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverConditionStatusTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverConditionStatusTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverConditionStatusTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func serverConditionStatusTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerConditionStatusType) error {
	*o = ServerConditionStatusType{}
	return nil
}

func testServerConditionStatusTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerConditionStatusType{}
	o := &ServerConditionStatusType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType object: %s", err)
	}

	AddServerConditionStatusTypeHook(boil.BeforeInsertHook, serverConditionStatusTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeBeforeInsertHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.AfterInsertHook, serverConditionStatusTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeAfterInsertHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.AfterSelectHook, serverConditionStatusTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeAfterSelectHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.BeforeUpdateHook, serverConditionStatusTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeBeforeUpdateHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.AfterUpdateHook, serverConditionStatusTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeAfterUpdateHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.BeforeDeleteHook, serverConditionStatusTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeBeforeDeleteHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.AfterDeleteHook, serverConditionStatusTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeAfterDeleteHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.BeforeUpsertHook, serverConditionStatusTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeBeforeUpsertHooks = []ServerConditionStatusTypeHook{}

	AddServerConditionStatusTypeHook(boil.AfterUpsertHook, serverConditionStatusTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverConditionStatusTypeAfterUpsertHooks = []ServerConditionStatusTypeHook{}
}

func testServerConditionStatusTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerConditionStatusTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverConditionStatusTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerConditionStatusTypeToManyServerConditions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerConditionStatusType
	var b, c ServerCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ServerConditionStatusTypeID = a.ID
	c.ServerConditionStatusTypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ServerConditions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ServerConditionStatusTypeID == b.ServerConditionStatusTypeID {
			bFound = true
		}
		if v.ServerConditionStatusTypeID == c.ServerConditionStatusTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ServerConditionStatusTypeSlice{&a}
	if err = a.L.LoadServerConditions(ctx, tx, false, (*[]*ServerConditionStatusType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServerConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ServerConditions = nil
	if err = a.L.LoadServerConditions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ServerConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testServerConditionStatusTypeToManyAddOpServerConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerConditionStatusType
	var b, c, d, e ServerCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverConditionStatusTypeDBTypes, false, strmangle.SetComplement(serverConditionStatusTypePrimaryKeyColumns, serverConditionStatusTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ServerCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, serverConditionDBTypes, false, strmangle.SetComplement(serverConditionPrimaryKeyColumns, serverConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ServerCondition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddServerConditions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ServerConditionStatusTypeID {
			t.Error("foreign key was wrong value", a.ID, first.ServerConditionStatusTypeID)
		}
		if a.ID != second.ServerConditionStatusTypeID {
			t.Error("foreign key was wrong value", a.ID, second.ServerConditionStatusTypeID)
		}

		if first.R.ServerConditionStatusType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ServerConditionStatusType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ServerConditions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ServerConditions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ServerConditions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testServerConditionStatusTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerConditionStatusTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerConditionStatusTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerConditionStatusTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerConditionStatusTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverConditionStatusTypeDBTypes = map[string]string{`ID`: `uuid`, `Slug`: `string`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                                = bytes.MinRead
)

func testServerConditionStatusTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverConditionStatusTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverConditionStatusTypeAllColumns) == len(serverConditionStatusTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerConditionStatusTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverConditionStatusTypeAllColumns) == len(serverConditionStatusTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerConditionStatusType{}
	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditionStatusTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverConditionStatusTypeDBTypes, true, serverConditionStatusTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverConditionStatusTypeAllColumns, serverConditionStatusTypePrimaryKeyColumns) {
		fields = serverConditionStatusTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverConditionStatusTypeAllColumns,
			serverConditionStatusTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerConditionStatusTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
