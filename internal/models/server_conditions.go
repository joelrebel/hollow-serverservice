// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ServerCondition is an object representing the database table.
type ServerCondition struct {
	ID                          string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ServerConditionTypeID       string     `boil:"server_condition_type_id" json:"server_condition_type_id" toml:"server_condition_type_id" yaml:"server_condition_type_id"`
	ServerID                    string     `boil:"server_id" json:"server_id" toml:"server_id" yaml:"server_id"`
	ServerConditionStatusTypeID string     `boil:"server_condition_status_type_id" json:"server_condition_status_type_id" toml:"server_condition_status_type_id" yaml:"server_condition_status_type_id"`
	Parameters                  types.JSON `boil:"parameters" json:"parameters" toml:"parameters" yaml:"parameters"`
	StatusOutput                types.JSON `boil:"status_output" json:"status_output" toml:"status_output" yaml:"status_output"`
	CreatedAt                   null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                   null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *serverConditionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverConditionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerConditionColumns = struct {
	ID                          string
	ServerConditionTypeID       string
	ServerID                    string
	ServerConditionStatusTypeID string
	Parameters                  string
	StatusOutput                string
	CreatedAt                   string
	UpdatedAt                   string
}{
	ID:                          "id",
	ServerConditionTypeID:       "server_condition_type_id",
	ServerID:                    "server_id",
	ServerConditionStatusTypeID: "server_condition_status_type_id",
	Parameters:                  "parameters",
	StatusOutput:                "status_output",
	CreatedAt:                   "created_at",
	UpdatedAt:                   "updated_at",
}

var ServerConditionTableColumns = struct {
	ID                          string
	ServerConditionTypeID       string
	ServerID                    string
	ServerConditionStatusTypeID string
	Parameters                  string
	StatusOutput                string
	CreatedAt                   string
	UpdatedAt                   string
}{
	ID:                          "server_conditions.id",
	ServerConditionTypeID:       "server_conditions.server_condition_type_id",
	ServerID:                    "server_conditions.server_id",
	ServerConditionStatusTypeID: "server_conditions.server_condition_status_type_id",
	Parameters:                  "server_conditions.parameters",
	StatusOutput:                "server_conditions.status_output",
	CreatedAt:                   "server_conditions.created_at",
	UpdatedAt:                   "server_conditions.updated_at",
}

// Generated where

var ServerConditionWhere = struct {
	ID                          whereHelperstring
	ServerConditionTypeID       whereHelperstring
	ServerID                    whereHelperstring
	ServerConditionStatusTypeID whereHelperstring
	Parameters                  whereHelpertypes_JSON
	StatusOutput                whereHelpertypes_JSON
	CreatedAt                   whereHelpernull_Time
	UpdatedAt                   whereHelpernull_Time
}{
	ID:                          whereHelperstring{field: "\"server_conditions\".\"id\""},
	ServerConditionTypeID:       whereHelperstring{field: "\"server_conditions\".\"server_condition_type_id\""},
	ServerID:                    whereHelperstring{field: "\"server_conditions\".\"server_id\""},
	ServerConditionStatusTypeID: whereHelperstring{field: "\"server_conditions\".\"server_condition_status_type_id\""},
	Parameters:                  whereHelpertypes_JSON{field: "\"server_conditions\".\"parameters\""},
	StatusOutput:                whereHelpertypes_JSON{field: "\"server_conditions\".\"status_output\""},
	CreatedAt:                   whereHelpernull_Time{field: "\"server_conditions\".\"created_at\""},
	UpdatedAt:                   whereHelpernull_Time{field: "\"server_conditions\".\"updated_at\""},
}

// ServerConditionRels is where relationship names are stored.
var ServerConditionRels = struct {
	Server                    string
	ServerConditionType       string
	ServerConditionStatusType string
}{
	Server:                    "Server",
	ServerConditionType:       "ServerConditionType",
	ServerConditionStatusType: "ServerConditionStatusType",
}

// serverConditionR is where relationships are stored.
type serverConditionR struct {
	Server                    *Server                    `boil:"Server" json:"Server" toml:"Server" yaml:"Server"`
	ServerConditionType       *ServerConditionType       `boil:"ServerConditionType" json:"ServerConditionType" toml:"ServerConditionType" yaml:"ServerConditionType"`
	ServerConditionStatusType *ServerConditionStatusType `boil:"ServerConditionStatusType" json:"ServerConditionStatusType" toml:"ServerConditionStatusType" yaml:"ServerConditionStatusType"`
}

// NewStruct creates a new relationship struct
func (*serverConditionR) NewStruct() *serverConditionR {
	return &serverConditionR{}
}

func (r *serverConditionR) GetServer() *Server {
	if r == nil {
		return nil
	}
	return r.Server
}

func (r *serverConditionR) GetServerConditionType() *ServerConditionType {
	if r == nil {
		return nil
	}
	return r.ServerConditionType
}

func (r *serverConditionR) GetServerConditionStatusType() *ServerConditionStatusType {
	if r == nil {
		return nil
	}
	return r.ServerConditionStatusType
}

// serverConditionL is where Load methods for each relationship are stored.
type serverConditionL struct{}

var (
	serverConditionAllColumns            = []string{"id", "server_condition_type_id", "server_id", "server_condition_status_type_id", "parameters", "status_output", "created_at", "updated_at"}
	serverConditionColumnsWithoutDefault = []string{"server_condition_type_id", "server_id", "server_condition_status_type_id", "parameters", "status_output"}
	serverConditionColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	serverConditionPrimaryKeyColumns     = []string{"id"}
	serverConditionGeneratedColumns      = []string{}
)

type (
	// ServerConditionSlice is an alias for a slice of pointers to ServerCondition.
	// This should almost always be used instead of []ServerCondition.
	ServerConditionSlice []*ServerCondition
	// ServerConditionHook is the signature for custom ServerCondition hook methods
	ServerConditionHook func(context.Context, boil.ContextExecutor, *ServerCondition) error

	serverConditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverConditionType                 = reflect.TypeOf(&ServerCondition{})
	serverConditionMapping              = queries.MakeStructMapping(serverConditionType)
	serverConditionPrimaryKeyMapping, _ = queries.BindMapping(serverConditionType, serverConditionMapping, serverConditionPrimaryKeyColumns)
	serverConditionInsertCacheMut       sync.RWMutex
	serverConditionInsertCache          = make(map[string]insertCache)
	serverConditionUpdateCacheMut       sync.RWMutex
	serverConditionUpdateCache          = make(map[string]updateCache)
	serverConditionUpsertCacheMut       sync.RWMutex
	serverConditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverConditionAfterSelectHooks []ServerConditionHook

var serverConditionBeforeInsertHooks []ServerConditionHook
var serverConditionAfterInsertHooks []ServerConditionHook

var serverConditionBeforeUpdateHooks []ServerConditionHook
var serverConditionAfterUpdateHooks []ServerConditionHook

var serverConditionBeforeDeleteHooks []ServerConditionHook
var serverConditionAfterDeleteHooks []ServerConditionHook

var serverConditionBeforeUpsertHooks []ServerConditionHook
var serverConditionAfterUpsertHooks []ServerConditionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerCondition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerCondition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerCondition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerCondition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerCondition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerCondition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerCondition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerCondition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerCondition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverConditionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerConditionHook registers your hook function for all future operations.
func AddServerConditionHook(hookPoint boil.HookPoint, serverConditionHook ServerConditionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		serverConditionAfterSelectHooks = append(serverConditionAfterSelectHooks, serverConditionHook)
	case boil.BeforeInsertHook:
		serverConditionBeforeInsertHooks = append(serverConditionBeforeInsertHooks, serverConditionHook)
	case boil.AfterInsertHook:
		serverConditionAfterInsertHooks = append(serverConditionAfterInsertHooks, serverConditionHook)
	case boil.BeforeUpdateHook:
		serverConditionBeforeUpdateHooks = append(serverConditionBeforeUpdateHooks, serverConditionHook)
	case boil.AfterUpdateHook:
		serverConditionAfterUpdateHooks = append(serverConditionAfterUpdateHooks, serverConditionHook)
	case boil.BeforeDeleteHook:
		serverConditionBeforeDeleteHooks = append(serverConditionBeforeDeleteHooks, serverConditionHook)
	case boil.AfterDeleteHook:
		serverConditionAfterDeleteHooks = append(serverConditionAfterDeleteHooks, serverConditionHook)
	case boil.BeforeUpsertHook:
		serverConditionBeforeUpsertHooks = append(serverConditionBeforeUpsertHooks, serverConditionHook)
	case boil.AfterUpsertHook:
		serverConditionAfterUpsertHooks = append(serverConditionAfterUpsertHooks, serverConditionHook)
	}
}

// One returns a single serverCondition record from the query.
func (q serverConditionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerCondition, error) {
	o := &ServerCondition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_conditions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerCondition records from the query.
func (q serverConditionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerConditionSlice, error) {
	var o []*ServerCondition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerCondition slice")
	}

	if len(serverConditionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerCondition records in the query.
func (q serverConditionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_conditions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverConditionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_conditions exists")
	}

	return count > 0, nil
}

// Server pointed to by the foreign key.
func (o *ServerCondition) Server(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerID),
	}

	queryMods = append(queryMods, mods...)

	return Servers(queryMods...)
}

// ServerConditionType pointed to by the foreign key.
func (o *ServerCondition) ServerConditionType(mods ...qm.QueryMod) serverConditionTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerConditionTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ServerConditionTypes(queryMods...)
}

// ServerConditionStatusType pointed to by the foreign key.
func (o *ServerCondition) ServerConditionStatusType(mods ...qm.QueryMod) serverConditionStatusTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ServerConditionStatusTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ServerConditionStatusTypes(queryMods...)
}

// LoadServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverConditionL) LoadServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerCondition interface{}, mods queries.Applicator) error {
	var slice []*ServerCondition
	var object *ServerCondition

	if singular {
		object = maybeServerCondition.(*ServerCondition)
	} else {
		slice = *maybeServerCondition.(*[]*ServerCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverConditionR{}
		}
		args = append(args, object.ServerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverConditionR{}
			}

			for _, a := range args {
				if a == obj.ServerID {
					continue Outer
				}
			}

			args = append(args, obj.ServerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Server = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.ServerConditions = append(foreign.R.ServerConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerID == foreign.ID {
				local.R.Server = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.ServerConditions = append(foreign.R.ServerConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadServerConditionType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverConditionL) LoadServerConditionType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerCondition interface{}, mods queries.Applicator) error {
	var slice []*ServerCondition
	var object *ServerCondition

	if singular {
		object = maybeServerCondition.(*ServerCondition)
	} else {
		slice = *maybeServerCondition.(*[]*ServerCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverConditionR{}
		}
		args = append(args, object.ServerConditionTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverConditionR{}
			}

			for _, a := range args {
				if a == obj.ServerConditionTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ServerConditionTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_condition_types`),
		qm.WhereIn(`server_condition_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerConditionType")
	}

	var resultSlice []*ServerConditionType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerConditionType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_condition_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_condition_types")
	}

	if len(serverConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerConditionType = foreign
		if foreign.R == nil {
			foreign.R = &serverConditionTypeR{}
		}
		foreign.R.ServerConditions = append(foreign.R.ServerConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerConditionTypeID == foreign.ID {
				local.R.ServerConditionType = foreign
				if foreign.R == nil {
					foreign.R = &serverConditionTypeR{}
				}
				foreign.R.ServerConditions = append(foreign.R.ServerConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadServerConditionStatusType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverConditionL) LoadServerConditionStatusType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerCondition interface{}, mods queries.Applicator) error {
	var slice []*ServerCondition
	var object *ServerCondition

	if singular {
		object = maybeServerCondition.(*ServerCondition)
	} else {
		slice = *maybeServerCondition.(*[]*ServerCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverConditionR{}
		}
		args = append(args, object.ServerConditionStatusTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverConditionR{}
			}

			for _, a := range args {
				if a == obj.ServerConditionStatusTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ServerConditionStatusTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_condition_status_types`),
		qm.WhereIn(`server_condition_status_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerConditionStatusType")
	}

	var resultSlice []*ServerConditionStatusType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerConditionStatusType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_condition_status_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_condition_status_types")
	}

	if len(serverConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServerConditionStatusType = foreign
		if foreign.R == nil {
			foreign.R = &serverConditionStatusTypeR{}
		}
		foreign.R.ServerConditions = append(foreign.R.ServerConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServerConditionStatusTypeID == foreign.ID {
				local.R.ServerConditionStatusType = foreign
				if foreign.R == nil {
					foreign.R = &serverConditionStatusTypeR{}
				}
				foreign.R.ServerConditions = append(foreign.R.ServerConditions, local)
				break
			}
		}
	}

	return nil
}

// SetServer of the serverCondition to the related item.
// Sets o.R.Server to related.
// Adds o to related.R.ServerConditions.
func (o *ServerCondition) SetServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerID = related.ID
	if o.R == nil {
		o.R = &serverConditionR{
			Server: related,
		}
	} else {
		o.R.Server = related
	}

	if related.R == nil {
		related.R = &serverR{
			ServerConditions: ServerConditionSlice{o},
		}
	} else {
		related.R.ServerConditions = append(related.R.ServerConditions, o)
	}

	return nil
}

// SetServerConditionType of the serverCondition to the related item.
// Sets o.R.ServerConditionType to related.
// Adds o to related.R.ServerConditions.
func (o *ServerCondition) SetServerConditionType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerConditionType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_condition_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerConditionTypeID = related.ID
	if o.R == nil {
		o.R = &serverConditionR{
			ServerConditionType: related,
		}
	} else {
		o.R.ServerConditionType = related
	}

	if related.R == nil {
		related.R = &serverConditionTypeR{
			ServerConditions: ServerConditionSlice{o},
		}
	} else {
		related.R.ServerConditions = append(related.R.ServerConditions, o)
	}

	return nil
}

// SetServerConditionStatusType of the serverCondition to the related item.
// Sets o.R.ServerConditionStatusType to related.
// Adds o to related.R.ServerConditions.
func (o *ServerCondition) SetServerConditionStatusType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerConditionStatusType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"server_condition_status_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServerConditionStatusTypeID = related.ID
	if o.R == nil {
		o.R = &serverConditionR{
			ServerConditionStatusType: related,
		}
	} else {
		o.R.ServerConditionStatusType = related
	}

	if related.R == nil {
		related.R = &serverConditionStatusTypeR{
			ServerConditions: ServerConditionSlice{o},
		}
	} else {
		related.R.ServerConditions = append(related.R.ServerConditions, o)
	}

	return nil
}

// ServerConditions retrieves all the records using an executor.
func ServerConditions(mods ...qm.QueryMod) serverConditionQuery {
	mods = append(mods, qm.From("\"server_conditions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"server_conditions\".*"})
	}

	return serverConditionQuery{q}
}

// FindServerCondition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerCondition(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerCondition, error) {
	serverConditionObj := &ServerCondition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_conditions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverConditionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_conditions")
	}

	if err = serverConditionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverConditionObj, err
	}

	return serverConditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerCondition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_conditions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverConditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverConditionInsertCacheMut.RLock()
	cache, cached := serverConditionInsertCache[key]
	serverConditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverConditionAllColumns,
			serverConditionColumnsWithDefault,
			serverConditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverConditionType, serverConditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverConditionType, serverConditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_conditions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_conditions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_conditions")
	}

	if !cached {
		serverConditionInsertCacheMut.Lock()
		serverConditionInsertCache[key] = cache
		serverConditionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerCondition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerCondition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverConditionUpdateCacheMut.RLock()
	cache, cached := serverConditionUpdateCache[key]
	serverConditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverConditionAllColumns,
			serverConditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_conditions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_conditions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverConditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverConditionType, serverConditionMapping, append(wl, serverConditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_conditions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_conditions")
	}

	if !cached {
		serverConditionUpdateCacheMut.Lock()
		serverConditionUpdateCache[key] = cache
		serverConditionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverConditionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_conditions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerConditionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverConditionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverCondition")
	}
	return rowsAff, nil
}

// Delete deletes a single ServerCondition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerCondition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerCondition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverConditionPrimaryKeyMapping)
	sql := "DELETE FROM \"server_conditions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_conditions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverConditionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverConditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_conditions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerConditionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverConditionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_conditions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverConditionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_conditions")
	}

	if len(serverConditionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerCondition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerCondition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerConditionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerConditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_conditions\".* FROM \"server_conditions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverConditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerConditionSlice")
	}

	*o = slice

	return nil
}

// ServerConditionExists checks if the ServerCondition row exists.
func ServerConditionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_conditions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_conditions exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerCondition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_conditions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverConditionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverConditionUpsertCacheMut.RLock()
	cache, cached := serverConditionUpsertCache[key]
	serverConditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverConditionAllColumns,
			serverConditionColumnsWithDefault,
			serverConditionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverConditionAllColumns,
			serverConditionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_conditions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverConditionPrimaryKeyColumns))
			copy(conflict, serverConditionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_conditions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverConditionType, serverConditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverConditionType, serverConditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_conditions")
	}

	if !cached {
		serverConditionUpsertCacheMut.Lock()
		serverConditionUpsertCache[key] = cache
		serverConditionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
