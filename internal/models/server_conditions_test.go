// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testServerConditionsUpsert(t *testing.T) {
	t.Parallel()

	if len(serverConditionAllColumns) == len(serverConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerCondition{}
	if err = randomize.Struct(seed, &o, serverConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerCondition: %s", err)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverConditionDBTypes, false, serverConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerCondition: %s", err)
	}

	count, err = ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerConditions(t *testing.T) {
	t.Parallel()

	query := ServerConditions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerConditionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerConditionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerConditions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerConditionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerConditionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerConditionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerConditionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerCondition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerConditionExists to return true, but got false.")
	}
}

func testServerConditionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverConditionFound, err := FindServerCondition(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverConditionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerConditionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerConditions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerConditionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerConditions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerConditionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverConditionOne := &ServerCondition{}
	serverConditionTwo := &ServerCondition{}
	if err = randomize.Struct(seed, serverConditionOne, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, serverConditionTwo, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerConditionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverConditionOne := &ServerCondition{}
	serverConditionTwo := &ServerCondition{}
	if err = randomize.Struct(seed, serverConditionOne, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, serverConditionTwo, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverConditionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func serverConditionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCondition) error {
	*o = ServerCondition{}
	return nil
}

func testServerConditionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerCondition{}
	o := &ServerCondition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverConditionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerCondition object: %s", err)
	}

	AddServerConditionHook(boil.BeforeInsertHook, serverConditionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverConditionBeforeInsertHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.AfterInsertHook, serverConditionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverConditionAfterInsertHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.AfterSelectHook, serverConditionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverConditionAfterSelectHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.BeforeUpdateHook, serverConditionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverConditionBeforeUpdateHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.AfterUpdateHook, serverConditionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverConditionAfterUpdateHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.BeforeDeleteHook, serverConditionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverConditionBeforeDeleteHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.AfterDeleteHook, serverConditionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverConditionAfterDeleteHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.BeforeUpsertHook, serverConditionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverConditionBeforeUpsertHooks = []ServerConditionHook{}

	AddServerConditionHook(boil.AfterUpsertHook, serverConditionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverConditionAfterUpsertHooks = []ServerConditionHook{}
}

func testServerConditionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerConditionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverConditionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerConditionToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerCondition
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerConditionSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*ServerCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerConditionToOneServerConditionTypeUsingServerConditionType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerCondition
	var foreign ServerConditionType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverConditionTypeDBTypes, false, serverConditionTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerConditionTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerConditionType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerConditionSlice{&local}
	if err = local.L.LoadServerConditionType(ctx, tx, false, (*[]*ServerCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerConditionType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerConditionType = nil
	if err = local.L.LoadServerConditionType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerConditionType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerConditionToOneServerConditionStatusTypeUsingServerConditionStatusType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerCondition
	var foreign ServerConditionStatusType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverConditionDBTypes, false, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverConditionStatusTypeDBTypes, false, serverConditionStatusTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerConditionStatusType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerConditionStatusTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerConditionStatusType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerConditionSlice{&local}
	if err = local.L.LoadServerConditionStatusType(ctx, tx, false, (*[]*ServerCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerConditionStatusType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerConditionStatusType = nil
	if err = local.L.LoadServerConditionStatusType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerConditionStatusType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerConditionToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerCondition
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverConditionDBTypes, false, strmangle.SetComplement(serverConditionPrimaryKeyColumns, serverConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}
func testServerConditionToOneSetOpServerConditionTypeUsingServerConditionType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerCondition
	var b, c ServerConditionType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverConditionDBTypes, false, strmangle.SetComplement(serverConditionPrimaryKeyColumns, serverConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverConditionTypeDBTypes, false, strmangle.SetComplement(serverConditionTypePrimaryKeyColumns, serverConditionTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverConditionTypeDBTypes, false, strmangle.SetComplement(serverConditionTypePrimaryKeyColumns, serverConditionTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerConditionType{&b, &c} {
		err = a.SetServerConditionType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerConditionType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerConditionTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerConditionTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerConditionTypeID))
		reflect.Indirect(reflect.ValueOf(&a.ServerConditionTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerConditionTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerConditionTypeID, x.ID)
		}
	}
}
func testServerConditionToOneSetOpServerConditionStatusTypeUsingServerConditionStatusType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerCondition
	var b, c ServerConditionStatusType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverConditionDBTypes, false, strmangle.SetComplement(serverConditionPrimaryKeyColumns, serverConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverConditionStatusTypeDBTypes, false, strmangle.SetComplement(serverConditionStatusTypePrimaryKeyColumns, serverConditionStatusTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverConditionStatusTypeDBTypes, false, strmangle.SetComplement(serverConditionStatusTypePrimaryKeyColumns, serverConditionStatusTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerConditionStatusType{&b, &c} {
		err = a.SetServerConditionStatusType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerConditionStatusType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerConditionStatusTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerConditionStatusTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerConditionStatusTypeID))
		reflect.Indirect(reflect.ValueOf(&a.ServerConditionStatusTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerConditionStatusTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerConditionStatusTypeID, x.ID)
		}
	}
}

func testServerConditionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerConditionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerConditionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerConditionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverConditionDBTypes = map[string]string{`ID`: `uuid`, `ServerConditionTypeID`: `uuid`, `ServerID`: `uuid`, `ServerConditionStatusTypeID`: `uuid`, `Parameters`: `jsonb`, `StatusOutput`: `jsonb`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                      = bytes.MinRead
)

func testServerConditionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverConditionAllColumns) == len(serverConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerConditionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverConditionAllColumns) == len(serverConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerCondition{}
	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverConditionDBTypes, true, serverConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerCondition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverConditionAllColumns, serverConditionPrimaryKeyColumns) {
		fields = serverConditionAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverConditionAllColumns,
			serverConditionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerConditionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
